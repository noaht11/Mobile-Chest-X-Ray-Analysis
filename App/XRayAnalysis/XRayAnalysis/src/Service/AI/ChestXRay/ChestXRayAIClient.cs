// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using SkiaSharp;

namespace XRayAnalysis.Service.AI.ChestXRay
{
    /// <summary>
    /// A wrapper class for calling and processing the results of the ChestXRay AI models.
    /// </summary>
    public abstract class ChestXRayAIClient : IDisposable
    {
        public const int ImageInputWidth = 224;
        public const int ImageInputHeight = 224;

        private CAMProcessor camProcessor;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChestXRayAIClient"/> class.
        /// </summary>
        /// <param name="camProcessor">A <see cref="CAMProcessor"/> instance to use for post-processing the feature maps generated by the model.</param>
        public ChestXRayAIClient(CAMProcessor camProcessor)
        {
            this.camProcessor = camProcessor;
        }

        public abstract void Dispose();

        /// <summary>
        /// Analyzes the provided image in a background task to generate an array of scores (likelihoods of each condition) and CAMs.
        /// </summary>
        /// <param name="inputImage">The image to analyze.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> to abort the analysis.</param>
        /// <returns>An awaitable <see cref="Task"/> that will output the score and CAM arrays.</returns>
        public abstract Task<(ScoreOutput[], CAM[])> Analyze(SKBitmap inputImage, CancellationToken cancellationToken);

        /// <summary>
        /// Generates an array of <see cref="ScoreOutput"/> objects from the provided data.
        /// </summary>
        /// <param name="modelOutput">The final output of the ML model (the likelihoods of each condition).</param>
        /// <returns>The generated ScoreOutput array.</returns>
        protected ScoreOutput[] GenerateScoreArray(float[] modelOutput)
        {
            float scoreSum = modelOutput.Sum();

            // Organize outputs
            ScoreOutput[] scoreArray = new ScoreOutput[modelOutput.Length];
            for (int i = 0; i < modelOutput.Length; i++)
            {
                float score = modelOutput[i];
                scoreArray[i] = new ScoreOutput(score);
            }

            foreach (ScoreOutput score in scoreArray)
            {
                System.Diagnostics.Debug.WriteLine(score);
            }

            return scoreArray;
        }

        /// <summary>
        /// Generates an array of <see cref="CAM"/> objects from the provided data.
        /// </summary>
        /// <param name="modelOutput">The feature map data from the ML model.</param>
        /// <returns>The generated CAM array.</returns>
        protected CAM[] GenerateCAMArray(float[] modelOutput)
        {
            return camProcessor.ConvertToCAMArray(modelOutput);
        }

        /// <summary>
        /// Ensures that the provided image matches the ML Model's expected image dimensions. 
        /// Throws ArgumentException if it does not match.
        /// </summary>
        /// <param name="image">The image to verify. The image MUST be <see cref="ImageInputWidth"/> by <see cref="ImageInputHeight"/>..</param>
        protected void ValidateImageDimensions(SKBitmap image)
        {
            if (image.Height != ImageInputHeight || image.Width != ImageInputWidth)
            {
                String errorMessage = String.Format("Image is not {0}x{1}", 
                                               ImageInputWidth.ToString(), 
                                               ImageInputHeight.ToString());
                throw new ArgumentException(errorMessage);
            }
        }
    }
}
